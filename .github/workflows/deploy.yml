name: Deploy WordPress Bedrock

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  COMPOSER_CACHE_DIR: ~/.composer/cache
  NODE_CACHE_DIR: ~/.npm

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
        coverage: none

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

    - name: Run PHP Linting
      run: composer run lint
      continue-on-error: true

  build-assets:
    name: Build Theme Assets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install root dependencies
      run: npm ci

    - name: Build root assets
      run: npm run build

    - name: Install Sage theme dependencies
      working-directory: ./web/app/themes/sage-theme
      run: npm ci

    - name: Build Sage theme assets
      working-directory: ./web/app/themes/sage-theme
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: built-assets
        path: |
          web/app/themes/sage-theme/public/
          public/
        retention-days: 1

  create-release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [test, build-assets]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
        tools: composer:v2

    - name: Install Composer dependencies (production)
      run: composer install --prefer-dist --no-dev --optimize-autoloader --no-progress

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: built-assets

    - name: Create deployment package
      run: |
        mkdir -p deploy-package
        rsync -av --exclude-from=.deployignore . deploy-package/
        cd deploy-package
        tar -czf ../deployment-$(date +%Y%m%d-%H%M%S).tar.gz .

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-*.tar.gz
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging (GCP)
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Deploy to Compute Engine
      run: |
        # Extract deployment package
        tar -xzf deployment-*.tar.gz -C deployment/
        
        # Copy files to staging server
        gcloud compute scp --recurse deployment/ ${{ secrets.GCP_INSTANCE_NAME }}:~/bedrock-staging/ --zone=${{ secrets.GCP_ZONE }}
        
        # Run deployment script on server
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone=${{ secrets.GCP_ZONE }} --command="
          cd ~/bedrock-staging &&
          sudo rsync -av --delete . /var/www/html/ &&
          sudo chown -R www-data:www-data /var/www/html/ &&
          sudo systemctl reload nginx &&
          sudo systemctl reload php8.1-fpm
        "

    - name: Health Check
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/wp-admin/admin-ajax.php || exit 1
        echo "‚úÖ Staging deployment successful!"

  deploy-production:
    name: Deploy to Production (GCP)
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Create backup
      run: |
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone=${{ secrets.GCP_ZONE }} --command="
          sudo tar -czf /backup/bedrock-backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /var/www/html .
        "

    - name: Deploy to Production
      id: deploy
      run: |
        # Extract deployment package
        tar -xzf deployment-*.tar.gz -C deployment/
        
        # Copy files to production server
        gcloud compute scp --recurse deployment/ ${{ secrets.GCP_INSTANCE_NAME }}:~/bedrock-production/ --zone=${{ secrets.GCP_ZONE }}
        
        # Run deployment script on server
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone=${{ secrets.GCP_ZONE }} --command="
          cd ~/bedrock-production &&
          sudo rsync -av --delete . /var/www/html/ &&
          sudo chown -R www-data:www-data /var/www/html/ &&
          sudo systemctl reload nginx &&
          sudo systemctl reload php8.1-fpm
        "

    - name: Health Check
      id: health-check
      run: |
        sleep 30
        if curl -f ${{ secrets.PRODUCTION_URL }}/wp-admin/admin-ajax.php; then
          echo "‚úÖ Production deployment successful!"
        else
          echo "‚ùå Health check failed!"
          exit 1
        fi

    - name: Rollback on failure
      if: failure() && steps.deploy.outcome == 'success'
      run: |
        echo "üîÑ Rolling back deployment..."
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone=${{ secrets.GCP_ZONE }} --command="
          BACKUP_FILE=\$(ls -t /backup/bedrock-backup-*.tar.gz | head -n1)
          sudo tar -xzf \$BACKUP_FILE -C /var/www/html/
          sudo chown -R www-data:www-data /var/www/html/
          sudo systemctl reload nginx
          sudo systemctl reload php8.1-fpm
        "
        echo "‚úÖ Rollback completed!"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow